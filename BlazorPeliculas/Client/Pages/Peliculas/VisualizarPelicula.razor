@page "/pelicula/{PeliculaId:int}"
@page "/pelicula/{PeliculaId:int}/{NombrePelicula}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensajes

<h3>VisualizarPelicula</h3>

@if (model == null)
{
    <text>Cargando...</text>
}
else
{
    <h2>@model.Pelicula.Titulo (@model.Pelicula.Lanzamiento.Value.ToString("yyyy"))</h2>
    for (int i = 0; i < model.Generos.Count; i++)
    {
        if (i < model.Generos.Count - 1)
        {
            @enlaceGenero(model.Generos[i])<text>, </text>
        }
        else
        {
            @enlaceGenero(model.Generos[i])
        }
    }
}
@code {

    [Parameter] public int PeliculaId { get; set; }
    [Parameter] public string  NombrePelicula { get; set; }
    private PeliculaVisualizarDTO model;
    private RenderFragment<Genero> enlaceGenero = (genero) =>@<a href="peliculas/buscar?generoid=@genero.Id">@genero.Nombre</a>;

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repositorio.Get<PeliculaVisualizarDTO>($"api/peliculas/{PeliculaId}");

        if (responseHttp.Error)
        {
            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigationManager.NavigateTo("");
                }
                else
                {
                    var mensajeError = await responseHttp.GetBody();
                    await mostrarMensajes.MostrarMensajeError(mensajeError);
                }
            }    
        }
        else
        {
            model = responseHttp.Response;
        }
    }
}
